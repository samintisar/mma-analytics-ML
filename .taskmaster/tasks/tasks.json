{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Setup Project Repository and Environment",
        "description": "Initialize the project repository structure as specified in the PRD, including all required folders and environment configuration for local, offline Jupyter workflow on RTX 3090.",
        "details": "Create the repo layout with data/, notebooks/, src/, models/, docs/, and environment.yml. Ensure all dependencies (PyTorch, timm, xgboost, scikit-learn, shap, mmpose/mediapipe, opencv, ffmpeg-python, numpy/pandas, matplotlib/plotly, mmcv/mmtracking, moviepy, pyannote-audio, transformers, speechbrain) are installed and compatible with RTX 3090. Validate GPU availability and CUDA setup.",
        "testStrategy": "Run environment.yml setup and verify all dependencies install without error. Test GPU access with a simple PyTorch tensor operation. Confirm repo structure matches PRD.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Stats Model Pipeline: Data Ingestion and Preprocessing",
        "description": "Build the pipeline to ingest, clean, and merge UFCStats CSVs with closing odds, ensuring leak-free feature engineering for pre-fight prediction.",
        "details": "Implement scripts/notebooks to scrape or load UFCStats data, merge with odds, and engineer features (physical diffs, career/recent form, SLpM/SApM, acc/def, TD/sub metrics, odds features). Ensure target is winner and features are leak-free. Save processed datasets to data/stats_proc/.",
        "testStrategy": "Validate output dataset for completeness, correct feature types, and absence of target leakage. Unit test feature engineering functions. Spot-check merged odds and stats for several fights.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Train and Evaluate Pre-Fight Stats Predictor with SHAP",
        "description": "Develop and train the pre-fight win probability model using XGBoost/LightGBM, reporting accuracy, Brier score, AUC, and SHAP explanations per matchup.",
        "details": "Implement notebook to train model on processed stats, using time-aware rolling CV (hold-out: most recent year). Integrate SHAP for top-5 driver explanations. Save model and SHAP plots to models_stats/.",
        "testStrategy": "Check model metrics (accuracy ≥ 70%, Brier ≤ 0.20, AUC) on hold-out. Validate SHAP output for top-5 drivers per matchup. Compare odds-only vs full-feature models.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Video Data Preparation and Segmentation",
        "description": "Prepare local MP4 UFC broadcast videos: normalize frame rate/resolution, segment rounds, and extract audio tracks for downstream analysis.",
        "details": "Implement scripts to batch process videos to 25–30 FPS, 720/1080p, segment by round, and extract audio tracks. Store outputs in data/videos_proc/.",
        "testStrategy": "Verify processed videos for correct FPS/resolution and round segmentation. Confirm audio tracks are extracted and synced. Spot-check several fights for quality.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Strike Classification Model Training and Inference",
        "description": "Train and deploy VideoMAE-S (ViT-Small) model for 7-class strike detection using curated and pseudo-labeled clips, with orientation normalization and sliding window inference.",
        "details": "Fine-tune VideoMAE-S on mixed boxing/kick/UFC clips (32–64 frames, AMP, batch size 8–16). Apply horizontal-flip augmentation and NMS for deduplication. Output per-strike timestamps and confidence. Save model to models/strike/.",
        "testStrategy": "Evaluate per-class precision (≥85% jab/cross/hook, ≥75% others) on hold-out clips. Validate timestamp accuracy and deduplication. Review confusion matrix and sample outputs.",
        "priority": "high",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Pose-Lite, Stance, Pressure, and Guard Analytics",
        "description": "Implement pose estimation (MMPose/MediaPipe), stance labeling, stance switching %, pressure time, and guard height analytics from processed video frames.",
        "details": "Extract keypoints (shoulders, hips, wrists, head) per frame. Derive stance by lead-hand/foot geometry, apply median filter for switching %. Use ByteTrack/DeepSORT for tracking, fit octagon ellipse, compute pressure metrics. Guard: wrist/forearm y-level vs chin/temple, forearm angle, classify high/mid/low with hysteresis. Correlate guard state with strike events.",
        "testStrategy": "Unit test keypoint extraction and stance/pressure calculations. Validate stance switching % and pressure time against annotated samples. Review guard classification and vulnerability mining outputs.",
        "priority": "high",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Grappling Position and Stance Style Inference",
        "description": "Develop grappling 4-class classifier and stance style inference pipeline using pose features, clustering, and supervised head for style buckets.",
        "details": "Train small CNN+MLP on pose crops for guard/side/mount/back control, with temporal smoothing (HMM/TCN). For style, extract features (torso yaw, bounce cadence, kick ratio, etc.), cluster (HDBSCAN/K-Means), then train supervised head on seed exemplars. Output per-fighter style probabilities and win-rate tables.",
        "testStrategy": "Evaluate grappling classifier accuracy (≥75%) and segment IoU. Validate style clusters (silhouette score) and supervised head (confusion matrix). Check win-rate tables for plausible trends.",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Commentary and Pundit Analysis Mining Pipeline",
        "description": "Build local ASR (Whisper-large-v2), speaker diarization (pyannote), and NLP pipeline for claim extraction, sentiment, and topic tagging from broadcast and pundit videos.",
        "details": "Implement batch ASR transcription with word-level timestamps, diarization for speaker labels, and NLP (NER, relation extraction, transformer classifiers) for claim extraction. Align claims to video events within ±1s. Aggregate claims by frequency, authority, and corroboration. Store transcripts and claims in data/commentary/.",
        "testStrategy": "Report WER (≤15% broadcast, ≤20% noisy), diarization accuracy, and claim extraction precision/recall on hand-labeled sets. Validate claim alignment to video events and aggregation logic.",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Coach-Facing Jupyter Report Generation",
        "description": "Develop main Jupyter notebook to produce coach-ready reports with visuals, embedded clips, CSV/JSON exports, and commentary timelines.",
        "details": "Integrate stats predictions, video analytics (stance, pressure, combos, vulnerabilities, dominant positions), style analysis, and commentary insights into a one-click notebook. Export CSV/JSON/MP4/WebM clips, transcripts, claim lists, and commentary_clips/ as specified.",
        "testStrategy": "Run end-to-end report for sample fights (e.g., Holloway vs Volkanovski I–III). Validate all outputs (visuals, clips, exports) for completeness and coach usefulness (≥4/5 rubric).",
        "priority": "high",
        "dependencies": [
          3,
          6,
          7,
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Testing, Evaluation, and Showcase",
        "description": "Implement comprehensive evaluation suite for all models and pipelines, and prepare showcase reports for key matchups.",
        "details": "Automate evaluation: stats model (accuracy, Brier, AUC, SHAP), video models (P/R/F1, segment IoU), ASR/diarization/claim extraction (WER, precision/recall), style inference (silhouette/confusion), and coach review. Prepare showcase for Holloway vs Volkanovski, including side-by-side clips and tactical insights.",
        "testStrategy": "Run evaluation scripts on hold-out sets and annotated samples. Review showcase outputs with internal rubric and coach feedback. Document all metrics and findings in README/demo_deck.",
        "priority": "medium",
        "dependencies": [
          9
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-09-04T21:23:37.803Z",
      "updated": "2025-09-04T21:23:37.803Z",
      "description": "Tasks for master context"
    }
  }
}